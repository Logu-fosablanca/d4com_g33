openapi: 3.0.0

info:
  version: 1.0.0

  title: D4com API

  description: A simple API to do CRUD on user, orders, product, upload resource

servers:
  - url: http://localhost:5000/

tags:
  - name: Users
    description: API to manage the users.
  - name: Login
    description: API to manage the login.

paths:
  /api/users:
    get:
      security:
        - bearerAuth: []
      summary: Lists all the users
      tags: [Users]
      responses:
        "200":
          description: The list of users.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"

    post:
      security:
        - bearerAuth: []
      summary: Creates an User object.

      tags: [Users]

      requestBody:
        required: true

        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"

      responses:
        "201":
          description: Created

  /api/users/{userID}:
    get:
      security:
        - bearerAuth: []
      summary: Returns an User by ID.

      tags: [Users]

      parameters:
        - name: userID

          in: path

          required: true

          description: Autogenerated User ID by MongoDB

          schema:
            type: string

      responses:
        "200":
          description: OK

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
    put:
      security:
        - bearerAuth: []
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"
      produces:
        - "application/json"
      parameters:
        - name: userID
          in: path
          description: ID of the user that need to be updated
          required: true
          type: string
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      security:
        - bearerAuth: []
      tags: [Users]
      summary: "Delete user"
      produces:
        - "application/json"
      parameters:
        - name: userID
          in: path
          description: The User that needs to be deleted
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

  /api/users/login:
    post:
      summary: Creates an Login object.

      tags: [Login]

      requestBody:
        required: true

        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"

      responses:
        "201":
          description: Created

components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Users:
      type: object

      required:
        - name

        - email

        - password

        - IsAdmin

      properties:
        id:
          type: integer

          description: The auto-generated id of the user.

        name:
          type: string

          description: The name of the user.

        email:
          type: string

          description: The email of the user.

        password:
          type: string

          description: The password of the user.

        IsAdmin:
          type: boolean

          description: To check whether admin or user.

      example:
        name: logu

        email: l@gmail.com

        password: 6969aw

        IsAdmin: true

    Login:
      type: object

      required:
        - email

        - password

      properties:
        email:
          type: string

          description: The email of the user.

        password:
          type: string

          description: The password of the user.

      example:
        email: admin@example.com

        password: 123456
